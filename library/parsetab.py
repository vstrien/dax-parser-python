
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND COLON COMMA DIVIDE EQUALS EVALUATE GREATERTHAN IDENTIFIER LBRACKET LESSTHAN LPAREN MINUS MODULO NUMBER PLUS POWER RBRACKET RPAREN SEMICOLON STRING TIMES WHITESPACEexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorfactor : factor POWER primaryfactor : primaryprimary : NUMBERprimary : IDENTIFIERargs : LPAREN arglist RPARENarglist : expressionarglist : arglist COMMA expressionprimary : WHITESPACE'
    
_lr_action_items = {'NUMBER':([0,8,9,10,11,12,],[5,5,5,5,5,5,]),'IDENTIFIER':([0,8,9,10,11,12,],[6,6,6,6,6,6,]),'WHITESPACE':([0,8,9,10,11,12,],[7,7,7,7,7,7,]),'$end':([1,2,3,4,5,6,7,13,14,15,16,17,],[0,-3,-6,-8,-9,-10,-14,-1,-2,-4,-5,-7,]),'PLUS':([1,2,3,4,5,6,7,13,14,15,16,17,],[8,-3,-6,-8,-9,-10,-14,-1,-2,-4,-5,-7,]),'MINUS':([1,2,3,4,5,6,7,13,14,15,16,17,],[9,-3,-6,-8,-9,-10,-14,-1,-2,-4,-5,-7,]),'TIMES':([2,3,4,5,6,7,13,14,15,16,17,],[10,-6,-8,-9,-10,-14,10,10,-4,-5,-7,]),'DIVIDE':([2,3,4,5,6,7,13,14,15,16,17,],[11,-6,-8,-9,-10,-14,11,11,-4,-5,-7,]),'POWER':([3,4,5,6,7,15,16,17,],[12,-8,-9,-10,-14,12,12,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,],[1,]),'term':([0,8,9,],[2,13,14,]),'factor':([0,8,9,10,11,],[3,3,3,15,16,]),'primary':([0,8,9,10,11,12,],[4,4,4,4,4,17,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','yaccer.py',6),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','yaccer.py',10),
  ('expression -> term','expression',1,'p_expression_term','yaccer.py',14),
  ('term -> term TIMES factor','term',3,'p_term_times','yaccer.py',18),
  ('term -> term DIVIDE factor','term',3,'p_term_divide','yaccer.py',22),
  ('term -> factor','term',1,'p_term_factor','yaccer.py',26),
  ('factor -> factor POWER primary','factor',3,'p_factor_power','yaccer.py',30),
  ('factor -> primary','factor',1,'p_factor_primary','yaccer.py',34),
  ('primary -> NUMBER','primary',1,'p_primary_number','yaccer.py',38),
  ('primary -> IDENTIFIER','primary',1,'p_primary_identifier','yaccer.py',42),
  ('args -> LPAREN arglist RPAREN','args',3,'p_args','yaccer.py',46),
  ('arglist -> expression','arglist',1,'p_arglist_single','yaccer.py',50),
  ('arglist -> arglist COMMA expression','arglist',3,'p_arglist_multi','yaccer.py',54),
  ('primary -> WHITESPACE','primary',1,'p_whitespace','yaccer.py',58),
]
